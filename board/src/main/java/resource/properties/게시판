
#답변형 게시판 처리
1. 주요 기능
	1) 게시판 글 등록, 리스트, 상세화면, 수정, 삭제, *답글화면/답글달기 처리
	2) 등록 데이터
		Board : 글번호, 작성자, 상위글번호, 등록일, 수정일, 조회수
		BoardFile : 제목, 내용, 첨부파일
	3) 답글 등록 처리
		무한 레벨 계층적으로 답글 등록 가능
	4) 리스트에 페이지 처리
		선택한 페이지당 글의 수에 따른 페이징 처리
		하단에 페이지 번호 리스트
	5) 첨부파일 추가 기능
	
2. 개발 순서
	1) DB 테이블 구성 및 sql 작성 
		- 게시판 메인 테이블 
		- *첨부파일 정보 테이블 
	2) sql 작성
	3) 초기 리스트 화면 DB처리 및 화면 구성
	4) 등록 처리 : 첨부파일 추가하기
	5) 상세화면 처리
		- 상세보기
		- 수정
		- 삭제
		
3. 등록 처리
	1) 등록 버튼 클릭
	2) dialogue 호출
	3) 등록 데이터 입력 후 submit 처리
	4) controller 요청 데이터 확인
	5) dao -> service -> controller 
	6) 등록 후, 리스트 controller 호출
	
	
4. 상세보기 처리 
	1) 클릭시 key를 기준으로 상세내용 조회
	2) 조회건수를 카운트up 처리
		dao/mapper
		service단에서 상세보기 시에 조회 건수 처리 dao 호출 
		
		
5. 첨부파일 처리 
	1) 환경설정(container)에 파일 업로드 처리 선언
		업로드 뷰 선언 : org.springframework.web.multipart.commons.CommonsMultipartResolver
	2) 클라이언트 -> 서버 파일 전송을 위한 처리
		# 화면단에서 처리
		- 파일을 업로드할 수 있는 form 유형으로 속성 선언
		- 첨부파일 인터페이스 설정
		# 요청값도 파일을 첨부할 수 있는 요청객체 선언 
	3) 받은 파일을 서버단에서 처리할 내용 (service)
		# Multipart로 전송되어온 파일객체를 File로 변경하여 특정 서버의 파일 저장 위치에 저장
			0. 임시경로와 실제경로를 properties의 info 등록하기 
			1. 파일명 가져오기
			2. File 객체 생성하기 (업로드할 파일정보를 선언)
			3. multipart 파일을 File객체로 변환하기
				transferTo
			4. 임시경로에서 파일을 받았다가 실제 경로로 복사 처리 필요
				임시경로
				C:\javaexp\workspace\.metadata\.plugins\org.eclipse.wst.sse.core
				실제경로
				C:\javaexp\workspace\board\src\main\webapp\z01_upload
			
		# 다운로드시 필요로 하는 파일 업로드 정보를 DB에 저장
		
		
		
#답글 처리
1. 프로세서 정리
	1) 답글을 클릭시, 답글 화면 로딩
		제목 : re:이전글
		상위글 : 이전글을 글번호
		내용 : 
		
		
		----이전글----
	2) 내용을 입력해서 답글 처리하면 DB에 입력된다
		refno에 이전글을 번호가 입력되게 처리
		-> 이후에 계층형 sql에 의해 답글이 리스트 되게 한다.
		
	
2. 개발 순서 
	0) controller : board로 모델값을 받을 수 있게 method=insertfrm 처리
	1) a02_insert.jsp
		화면에서 상세화면에서 처리된 내용을 받을 수 있게 form객체의 내용을 처리해야한다
		spring에서 지원하는 form태그 활용 : 제목, 상위글번호, 내용 
	2) a03_detail.jsp
		답글 클릭시 a02_insert.jsp에 넘길 데이터 처리하기
		ex) no -> refno, subject -> RE:subject,
			content -> --이전글-- 포함 내용 처리  
			

#다운로드 처리
1. 상세화면에서 등록된 파일 출력
	1) dao 작성
		상세로딩 시 첨부파일로 가져올 수 있게 처리 
		boardfile 
		dao
		public String getFileName(int no);
		mapper 
		select fname
		from boardfile 
		where no=#{no}
		
	2) service단에
		출력한 단위 vo에 fname을 추가하여 
		해당 no에 연관된 fname을 가져오게 처리한다
		
	3) 화면단에서 fname 출력 
		
2. 다운로드 View 만들기
	1) 사용자 정의 viewer 만들기
	
3. container에 등록 처리
	1) <bean id="download" 
	
4. 다운로드 controller 선언
	1)
	@RequestMapping("download.do")
	public String download(@RequestMapping("fname") String fname, model d) {
		d.addAttribute("downloadFile", fname);
		return "컨테이너에서 선언한 download Viewer";
	}

5. 상세화면에서 해당 파일 클릭시 다운로드 controller 호출 및 다운로드 처리
	location.href = "${path}/download.do?fname="+fname;

		
		
#계층 sql을 통한 페이징 처리 
1. 목적
	1)데이터의 건수가 많아짐에 따라 웹 화면에서 출력할 수 있는 한계가 있기에 
		페이징 처리를 통해서 데이터를 효과적으로 확인할 수 있게한다.
	2) 답글달기가 바로 밑에 처리되므로 효과적인 게시판의 내용 확인과 대화형
		게시판을 만들기 위함이다. 
		
2. 기능 처리 프로세스
	1) 계층형 sql 처리
		데이터를 특정한 컬럼을 기준으로 계층적으로 데이터를 처리하려는 목적으로
			오라클에서 지원되고 있다
		ex) 1레벨 라바 or 할아버지, 2레벨 드론/저글링/하드라 or 큰아버지/아버지/삼촌, 3레벨 러커 or 사촌형/나/누나
		
	2) DB처리
		컬럼구조 : no, refno 글과 상위글 간의 계층적 연관관계를 처리 
		
	3) sql의 주요 키워드 
		start with 컬럼 = 데이터 : 최상위 레벨의 데이터를 조건
			(계층형 게시판에서 최상위 데이터는 refno가 0임 -> 여기서 답글을 달면 번호가 올라감)
			ex) 답글형 게시판의 경우 refno=0
		connect by prior 연관관계컬럼명 = 연관관계컬럼명 
		order siblings by 컬럼명 asc/desc 
			정렬처리 : 계층적 데이터처리의 정렬의 순서를 지정
			


#페이지처리 
1. 기능 내용
	0) 총데이터 건수
	1) 한번에 보여줄 페이지지정 : 화면 form(3/5/10/30/50/100) -> vo (검색을 위한 vo를 만들어서 처리하는 방식)
	2) 페이지의 갯수 : 120/10 => 10페이지
	3) 클릭한 현재 페이지번호 
	4) -> 현재 페이지의 시작번호, 현재 페이지의 마지막 번호 
	
	[DB] 총 데이터 건수 
	[요청값] 한번에 보여줄 페이지크기 
	[로직] 총 페이지수 count/pageSize
	[요청값] 클릭한 현재 페이지번호
	[로직] 현재 페이지의 시작번호  
		: curPage, pageSize를 이용해서 도출
	[로직] 현재 페이지의 마지막 번호
		: curPage, pageSize 이용해서 도출 
	
2. 처리 순서
	1) 데이터가 순서별로 출력되는 sql 작성
		rownum : 데이터의 일련번호를 나타낸다
	2) 위 rownum을 기준으로 페이지의 start, end 번호를 지정하여 특정한 페이지의
		데이터를 지정할 수 있다
		rownum between #{start} and #{end}
		
		SELECT *
		FROM (
			SELECT rownum cnt, b.* 
			FROM board b
			WHERE subject LIKE '%'||#{subject}||'%'
			AND writer LIKE '%'||#{writer}||'%'
			START WITH refno = 0
			CONNECT BY PRIOR NO = refno
			ORDER siblings BY NO DESC)
		WHERE cnt BETWEEN #{start} AND #{end};
		
	3) 리스트 vo에 번호 속성 넣기 
		: cnt 속성 추가 
	4) 조회VO(BoardSch)를 통해 요청값과 로직을 통해서 처리할 내용을 선언 확인
		controller의 요청값을 BoardSch로 선언,
		-> service, dao, mapper 변경
		Service단에 기본 속성값 start/end 값 강제 설정 
		jsp no -> cnt로 출력해서 1단계 화면 내용 확인 
		-----------------------------------------------------------
	5) DB(DAO, mapper)를 통해서 나타낼 내용 처리 
		: [DB] 총 데이터 건수, 전체 sql mapper 확인 처리 
			- mapper 설정
				SELECT count(*) 
				FROM board b
				WHERE subject LIKE '%'||#{subject}||'%'
				AND writer LIKE '%'||#{writer}||'%'
		
			- dao 설정
				public int totcnt(BoardSch sch);
	6) controller의 요청값을 BoardSch로 선언
	7) service단에서 BoardSch의 로직 처리 
		: count, pageSize, pageCount, curPage, start, end 
	8) jsp(뷰)를 통해서 요청값으로 처리할 내용 선언(form)
		: pageSize, curPage
		pageCount를 통해서 하단에 페이지 리스트 처리 
		
		// 1. 데이터의 총 건수 설정
		sch.setCount(dao.totCnt(sch));
		
		// 2. 페이지크기(요청) : default로 페이지 크기 지정 - 초기화면
		if(sch.getPageSize() == 0) {
			sch.setPageSize(5);
		}
		
		// 3. 총 페이지 수
		//	ex) 데이터 건수가 10건일때는 2페이지
		//		데이터 건수가 16건일때 3페이지와 남은 1개를 나타내기 위해 4페이지
		//	sch.getCount()/sch.getPageSize()로 한 다음
		//	Math.ceil() : 올림처리를 하면 나머지값이 존재하면 올림 처리를 함 
		//	문제점1: java에서는 정수/정수로 나누면 정수로 출력됨
		//	원하는 대로 소숫점 처리를 하려면 double로 promote(형변환) 필요
		//	문제점2 : Math.ceil()의 리턴값은 실수이므로 정수로 casting해야함
		//int totPage = (int)Math.ceil(sch.getCount()/(double) sch.getPageSize());
		sch.setPageCount((int)Math.ceil(sch.getCount()/(double) sch.getPageSize()));
		
		// 4. 화면에서 클릭한 페이지 번호 (요청값) : 초기화면을 위한 default 설정
		if(sch.getCurPage() == 0) {
			sch.setCurPage(1);
		}
		
		// 5. DB를 이용하여 한페이지에 보일 데이터 선언(시작번호/마지막번호 지정)
		//	sch.getCurPage() : 클릭한 페이지번호
		//	sch.getPageSize() : 한번에 보여줄 데이터건수
		//	클릭한 페이지가 1이고 한번에 보여줄 데이터가 5이면 -> 마지막 페이지 번호는 1*5= 5페이지
		//	클릭한 페이지가 2이고 한번에 보여줄 데이터가 5이면 -> 마지막 페이지 번호는 1*5= 10페이지
		sch.setStart((sch.getCurPage()-1)*sch.getPageSize()+1);
		sch.setEnd(sch.getCurPage() * sch.getPageSize());
		
		/*
		
		마지막번호는 페이지번호와 한페이지에 보이는 데이터 건수를 곱하는 것으로 쉬움
		시작번호는 마지막번호의 규칙에서 작성해야함 
		
		한 페이지당 5건씩 보이는 페이지에서 확인
		페이지번호		페이지건수 		보일페이지				시작페이지
		1			5			1  2  3  4  5		(1-1)*5+1
		2			5			6  7  8  9  10		(2-1)*5+1
		3 			5			11 12 13 14 15		(3-1)*5+1
		4			5			16 17 18 19 20		(4-1)*15+1
		시작페이지의 경우 (페이지번호에서-1) * (페이지 총건수+1) 로 구한다

#하단 페이징 처리 
0. 페이지 크기 변경 (select로 페이지 크기 변경)
	페이지 선택을 변경했을 때 현재 페이지 번호를 1로 하고, submit() 처리
1. 전체 페이징 처리
	1) 특정 번호 출력 
		js 함수를 이용해서 curPage를 지정하고, submit 처리 
		
		
2. 페이지 block으로 페이지처리 
	1) 데이터양이 증가하여 페이지 건수가 늘어날때
		한번에 나타날 페이지 블럭의 갯수를 지정하여 next나 previous로 이동하면서
		효과적으로 화면에 데이터를 출력하기 위해 활용된다 
	2) 처리순서
		- boardSch vo에 시작 block과 마지막 block 속성 선언, 화면에 출력할 blockSize 선언 
		- service단 처리 
			1. blockSize 속성 강제 설정 (5개)
			2. blocknum 지정 (현재페이지번호/블럭의 크기, 올림 처리하면 아래와 같음)
				1  2  3  4  5  ->> blocknum 1
				6  7  8  9  10 ->> blocknum 2
				11 12 13 14 15 ->> blocknum 3
			3. 블럭의 마지막 번호 
				blocknum * blockSize
			4. 블럭의 시작번호
				(blocknum-1) * blockSize+1
				
		- 화면단 처리 
			출력한 block의 갯수로 화면에 표시 
			next/previous를 클릭하면 curPage번호 설정 처리
			
			// 블럭 처리 
			// 1. 블럭 크기 지정
			sch.setBlockSize(5);
			
			// 2. blocknum 지정 : 전체 페이지 번호/블럭 크기
			int blocknum = (int) (Math.ceil(sch.getCurPage()/(double)sch.getBlockSize()));
			
			// 3. 마지막 블럭 번호 
			//	마지막 블럭번호가 딱 떨어지는 경우가 잘 없음 
			// 	총 페이지수가 23일때 -> 한번에 보여줄 block의 수가 5로 25가 나오므로 에러 발생
			// 	그래서 마지막 블럭번호는 총 페이지수를 넘지 못하게 처리해야함
			int endblock = blocknum * sch.getBlockSize();
			if(endblock>sch.getPageCount()) {
				endblock = sch.getPageCount();
			}
			sch.setEndBlock(endblock);
			sch.setStartBlock((blocknum-1) * sch.getBlockSize()+1);
			
			
			
			-화살표(Next/Previous) 
			  1  2  3  4  5  >
			< 6  7  8  9  10 >
			< 11 12 13
			
			 화살표(Next)를 클릭하면 현재 마지막 블럭+1로 해서 curPage를 설정하면 다음 블럭이 출력된다.
			 화살표(Previous)를 클릭하면 현재 시작 블럭-1로 해서 curPage를 설정하면 이전 블럭이 출력된다
				
				
				